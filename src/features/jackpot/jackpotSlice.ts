import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { RootState } from '../../app/store';
import { fetchJackpots } from './jackpotAPI';

export interface Jackpot {
	game: string;
	amount: number;
}

export interface Jackpots {
	[x: string]: Jackpot;
}

export interface JackpotState {
	list: Jackpots;
	status: string;
}

const initialState: JackpotState = {
	list: {},
	status: 'idle'
};

export const fetchJackpotsAsync = createAsyncThunk(
	'jackpot/fetchJackpots',
	async () => {
		const response = await fetchJackpots();
		// The value we return becomes the `fulfilled` action payload
		return response.data;
	}
);

export const pollJackpotsAsync = createAsyncThunk(
	'jackpot/pollJackpots',
	async (_, thunkAPI) => {
		const response = await new Promise<string>((resolve) => {
			setInterval(() => {
				const state = thunkAPI.getState() as RootState;
				const currentCategory = state.categories.selectedCategory;
				const windowIsActive = state.browser.active;

				if (windowIsActive && ['top', 'slots', 'new'].includes(currentCategory)) {
					thunkAPI.dispatch(fetchJackpotsAsync());
				}

				resolve('done');
			}, 3000);
		});

		return response;
	}
);

export const jackpotSlice = createSlice({
	name: 'jackpots',
	initialState,
	// The `reducers` field lets us define reducers and generate associated actions
	reducers: {},
	// The `extraReducers` field lets the slice handle actions defined elsewhere,
	// including actions generated by createAsyncThunk or in other slices.
	extraReducers: (builder) => {
		builder
			.addCase(fetchJackpotsAsync.pending, (state) => {
				state.status = 'loading';
			})
			.addCase(fetchJackpotsAsync.fulfilled, (state, action) => {
				state.status = 'idle';
				action.payload.forEach(jackpot => {
					state.list[jackpot.game] = jackpot;
				});
			})
			.addCase(fetchJackpotsAsync.rejected, (state) => {
				state.status = 'failed';
			});
	}
});

export const selectJackpots = (state: RootState) => state.jackpots.list;
export const selectJackpot = (id: string) => (state: RootState) => state.jackpots.list[id];

export default jackpotSlice.reducer;
